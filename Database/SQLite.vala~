using GLib;
using Sqlite;
using Gee;
using SinticBolivia.Database;

namespace SinticBolivia.Database
{
	public class SBSQLite : SBDatabase
	{
		protected string _dbFile = "";
		protected Sqlite.Database _db;
		//protected static ArrayList _results;
		protected static SBDBRow[] _results;
		
		public SBSQLite(string db_file = "")
		{
			this._dbFile = db_file;
		}
		public override void Open()
		{
			if( !FileUtils.test(this._dbFile, FileTest.IS_REGULAR) )
			{
				stderr.printf("The database file (%s) does not exists\n", this._dbFile);
				return;
			}
			int res = Sqlite.Database.open(this._dbFile, out this._db);
			if( res != Sqlite.OK )
			{
				stderr.printf("Can't open database: %s (%d)", this._db.errmsg(), res);
				return;
			}
		}
		public override void Close()
		{
			
		}
		public override SBDBRow[] Query(string query)
		{
			Statement stmt;
			
			string error = "";
			SBDBRow[] rows = {};
			
			int res = this._db.prepare_v2(query, -1, out stmt, null);
			if( res != Sqlite.OK )
			{
				stderr.printf("SQLite Query Error: %s", error);
				return rows;
			}
			int cols = stmt.column_count();
			do 
			{
				res = stmt.step();
				switch (res) 
				{
					case Sqlite.DONE:
						break;
					case Sqlite.ROW:
						SBDBRow row = new SBDBRow();
						for (int col = 0; col < cols; col++) 
						{
							SBDBCell cell = new SBDBCell();
							cell.ColumnName = stmt.column_name (col);
							cell.TheValue = stmt.column_text(col);
							row.Add(cell);
						    //string txt = stmt.column_text(col);
						    //print ("%s = %s\n", stmt.column_name (col), txt);
						}
						rows += row;
						break;
					default:
						printerr ("Error: %d, %s\n", res, this._db.errmsg ());
						break;
				}
			} while (res == Sqlite.ROW);
			return rows;
			
		}
		public override long Execute(string sql)
		{
			return 0;
		}
		public static int QueryCallback (int n_columns, string[] values, string[] column_names)
		{
			/* 
			SBDBRow row = new SBDBRow();
			for (int i = 0; i < n_columns; i++) 
			{
				//stdout.printf ("%s = %s\n", column_names[i], values[i]);
				//var row = new HashMap<string, string>();
				//row.set(column_names[i], values[i]);
				SBDBCell cell = new SBDBCell();
				cell.ColumnName = column_names[i];
				cell.TheValue = values[i];
				row.Add(cell);
				//stdout.printf ("%s = %s |", cell.ColumnName, cell.TheValue);
				//row[column_names[i]] = values[i];
				//results.add(row);
			}
			*/
			//((ArrayList<SBDBRow>)SBSQLite._results).add(row);
			//SBSQLite._results += row;
			//stdout.printf("\n");
			return 0;
		}
	}
}
