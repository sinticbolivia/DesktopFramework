using GLib;
using Gee;
using SinticBolivia;

namespace SinticBolivia.Database
{
	public class SBDBCell : Object
	{
		protected string _columnName;
		protected string _columnValue;

		public string ColumnName
		{
			set
			{
				this._columnName = value;	
			}
			get
			{
				return this._columnName;	
			}
		}
		public string TheValue
		{
			get
			{
				return this._columnValue;
			}	
			set
			{
				this._columnValue = value;	
			}
		}
		
		
		public SBDBCell()
		{
			
		}
		
	}
	public class SBDBRow : Object
	{
		protected int _length;
		protected Array<SBDBCell> _cells;
		protected Array<string> _keys;
		
		public Array<SBDBCell> Cells
		{
			get
			{
				return this._cells;	
			}
			set
			{
				//this._cells = value;				
			}
		}
		public SBDBRow()
		{
			this._cells = new Array<SBDBCell>();
			this._keys = new Array<string>();
			this._length = 0;
			
		}
		public void Add(SBDBCell cell)
		{
			this._cells.append_val(cell);
			this._length++;
						
		}
		public string Get(string column_name)
		{
			int index = -1;
			if( !this.ColumnNameExists(column_name, out index) )
				return "";
			
			return this.Cells.index(index).TheValue;
		}
		public bool ColumnNameExists(string column, out int cell_index)
		{
			bool exists = false;
			cell_index = -1;
			
			for(int i = 0; i < this.Cells.length; i++)
			{
				if(this.Cells.index(i).ColumnName == column )
				{
					cell_index = i;
					exists = true;
					break;
				}
			}
			
			return exists;
		}
	}
	public abstract class SBDatabase : GLib.Object 
	{
		protected	string		_databaseType = "";
		protected	SBDBRow[]	_rows;
		public		int			LastInsertId = 0;
		public 		string 		LastQuery = "";
		
		/**
		 * Properties
		 */
		public SBDBRow[] Rows
		{
			get
			{
				return this._rows;
			}
			set
			{
				this._rows = value;
			}
		}
		public 		abstract 	void Open();
		public 		abstract 	void Close();
		public 		abstract 	long Query(string query);
		public 		abstract 	long Execute(string sql);
		public		abstract	void BeginTransaction();
		public		abstract	void EndTransaction();
		
		/**
		*  Insert a row into table
		*/
		public virtual long Insert(string table, HashMap<string, Value?> data)
		{
			string query = @"INSERT INTO $table (%s) VALUES(%s)";
			string cols = "";
			string values = "";
			foreach(string key in data.keys)
			{
				if( this._databaseType == "sqlite" || this._databaseType == "sqlite3" )
				{
					cols += "[%s],".printf(key);
				}
				else if( this._databaseType == "mysql" )
				{
					cols += "`%s`,".printf(key);
				}
				else
				{
					cols += "%s,".printf(key);
				}
				//Value the_value = (Value)data.get(key);
				
				//##build values
				string gtype = data.get(key).type_name();
				//stdout.printf("typeof => %s\n", gtype);
				
				if( gtype == "gint" )
				{
					values += "%d,".printf((int)data.get(key));
				}
				else if( gtype == "glong" )
				{
					values += "%ld,".printf((long)data.get(key));
				}
				else if( gtype == "gint64" )
				{
					//string format = "%"+int64.FORMAT+",";
					values += "%s,".printf(data.get(key).get_int64().to_string());
				}
				else if( gtype == "gfloat" )
				{
					values += "%.2f,".printf((float)data.get(key));
				}
				else if( gtype == "gdouble" )
				{
					values += "%.2lf,".printf(data.get(key).get_double());
				}
				else if( gtype == "gchararray" )
				{
					values += "'%s',".printf((string)data.get(key));
				}
				else
				{
					values += "'%s',".printf((string)data.get(key));
				}
				
			}
			cols 	= cols.substring(0, cols.length - 1);
			values 	= values.substring(0, values.length - 1);
			query 	= query.printf(cols, values);
			this.LastQuery = query;
			this.Execute(query);
			return this.LastInsertId;
		}
		public virtual void Update(string table, HashTable<string, Value?> data)
		{
			string query = @"UPDATE $table SET ";
			foreach(string key in data.get_keys())
			{
				if( this._databaseType == "sqlite" || this._databaseType == "sqlite3" )
				{
					query += "[%s] = ".printf(key);
				}
				else if( this._databaseType == "mysql" )
				{
					query += "`%s` = ".printf(key);
				}
				else
				{
					query += "%s = ".printf(key);
				}
				//check for value type
				Value val = data.get(key);
				
				if( val.holds(typeof(int)) || val.holds(typeof(long)))
				{
					query += "%d, ".printf((int)val);
				}
				else if( val.holds(typeof(float)) || val.holds(typeof(double)) )
				{
					query += "%f, ".printf((double)val);
				}
				else
				{
					query += "%s, ".printf((string)val);
				}
				
			}
			query = query.substring(0, query.length - 2);
			this.Execute(query);
			stdout.printf("QUERY: %s\n", query);
		}
	}

}

